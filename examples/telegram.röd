record TelegramBot {
	token : string
	offset : number
	thread : thread
	on_message : function
	
	start : function
	stop : function
	update : function
	send_message : function
	send_photo : function
}

json_search map queries... {
	for node in map[1]; do
		for query in queries; do
			if test node[0] -eq query[0]; do
				query[1] node[1]
			done
		done
	done
}

tg_init token {
	bot := new TelegramBot
	
	bot.token = token
	
	base_url := "https://api.telegram.org/bot"..token
	update_url = base_url.."/getUpdates?offset="
	message_url = base_url.."/sendMessage"
	photo_url = base_url.."/sendPhoto"
	
	bot.offset = 0
	
	bot.on_message = {|chat message|;}
	
	bot.start = {
		bot.thread = ![thread {
			while push bot.running; do
				try do
					bot.update
				done
			done
		}]
		bot.thread.start
	}
	bot.stop = {
		bot.running = ![false]
	}
	bot.update = {
		code := !(wcat update_url..bot.offset)&" "
		tree := ![json code]
		json_search tree ("result" { |updates|
			for update in updates[1]; do
				chat_id := 0
				msg_text := ""
				json_search update ("update_id" { |id|
					if test bot.offset -le id[1]; do
						bot.offset = 'id[1]+1'
					done
				}) ("message" { |message|
					json_search message ("chat" { |chat|
						json_search chat ("id" { |id|
							chat_id = id[1]
						})
					}) ("text" { |text|
						msg_text = text[1]
					}) ("caption" { |caption|
						msg_text = caption[1]
					})
				})
				bot.on_message chat_id msg_text
			done
		})
	}
	bot.send_message = { |chat message|
		{} | exec "curl" --silent message_url -F "chat_id="..chat -F "text="..message | {}
	}
	bot.send_photo = { |chat file|
		{} | exec "curl" --silent photo_url -F "chat_id="..chat -F "photo=@"..file | {}
	}
	
	push bot
}