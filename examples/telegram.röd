record telegram_bot {
	token : string
	offset : number = 0
	thread : thread
	running : boolean = ![true]
	on_message : function = {|chat message|;}
	
	function start {
		self.thread = ![thread {
			while push self.running; do
				try self.update
			done
		}]
		self.thread.start
	}
	
	function stop {
		self.running = ![false]
	}
	
	function update {
		base_url := "https://api.telegram.org/bot"..self.token
		update_url = base_url.."/getUpdates?offset="
		
		code := !(wcat update_url..self.offset)&" "
		tree := ![json code]
		json_search tree ("result" { |updates|
			for update in updates[1]; do
				chat_id := 0
				msg_text := ""
				json_search update ("update_id" { |id|
					if test self.offset -le id[1]; do
						self.offset = 'id[1]+1'
					done
				}) ("message" { |message|
					json_search message ("chat" { |chat|
						json_search chat ("id" { |id|
							chat_id = id[1]
						})
					}) ("text" { |text|
						msg_text = text[1]
					}) ("caption" { |caption|
						msg_text = caption[1]
					})
				})
				self.on_message chat_id msg_text
			done
		})
	}
	
	function send_message chat message {
		base_url := "https://api.telegram.org/bot"..self.token
		message_url = base_url.."/sendMessage"
		{} | exec "curl" --silent message_url -F "chat_id="..chat -F "text="..message | {}
	}
	
	function send_photo chat file {
		base_url := "https://api.telegram.org/bot"..self.token
		photo_url = base_url.."/sendPhoto"
		{} | exec "curl" --silent photo_url -F "chat_id="..chat -F "photo=@"..file | {}
	}
}

json_search tree queries... {
	for node in tree[1]; do
		for query in queries; do
			if test node[0] -eq query[0]; do
				query[1] node[1]
			done
		done
	done
}

tg_init token {
	bot := new telegram_bot
	bot.token = token
	push bot
}